// 한줄 주석: 코드에는 영향을 주지 않는다.
// ㄴ 내가 또는 타인을 위해 메모를 남기는 것!

// 우리가 항상 염두를 해둬야 하는건 프로그래밍은 항상 효율을 
// 최우선한다.


// 1iIlL0Oo

/*
단위 주석
단위 주석
단위 주석
단위 주석
단위 주석
*/



// 매크로
// ㄴ 코드의 유지보수와 가독성 향상을 위해서 가져왔다.
#pragma region 프로그래밍 언어
/*

▶ 프로그래밍이란?

- programming. program에 ing가 붙었으니 지금 프로그램을 하고 있다. 라고
직역 할 수 있다.
- 지금 프로그램을 하고 있다는 얘기는 결국 프로그램을 만드는 것
개발을 의미한다.

▶ 프로그래밍 언어란?

- 컴퓨터와 대화 또는 명령을 할 수 있는 일련의 명령문을 작성 할 수 있는 언어를 의미한다.
(즉, 프로그래밍 언어를 이용하면 프로그램을 만드는 것이 가능.)

- 프로그래밍 언어에는 다양한 언어가 존해하지만 크게 2가지로 분류할 수 있다
ㄴ 1. 특정 기능 구현에 최적화 된 언어 (ex c# cript)
ㄴ 2. 범용적 언어(ex c++)

▶ 프로그래밍 언어를 컴퓨터에서 이해하는 방법

- c/c++ 언어로 작성되어 있는 코드는 컴퓨터가 이해 할 수 없는 명령문이기 때문에.
c/c++ 언어는 중간에서 언어를 해석해 주는 번역가 역활을 하는 무언가가 필요하다.

※ 그게 바로 "컴파일러"
ㄴ 컴파일러는 해당 코드를 컴퓨터가 이해할 수 있는 언어로 변환하는 역할을 한다.(c#은 컴파일러 x c, c++ 무거운이유임)


※ 즉, 컴파일러가 프로그래밍 언어와 컴퓨터 사이에서 통역사 역할을 해주기 때문에
프로그래밍 언어를 작성하는 사람은 컴퓨터의 언어를 모른다 하더라도 컴퓨터에게 명령을 내리는것이 가능하다.

※ 컴파일러(c/c++) != 인터프리터(c# Script)



▶ 프로그래밍 기술 및 기법
- 프로그래밍 기술은 점차 발전해 왔으며 앞으로도 계속 발전해 나갈것이다.
ㄴ 현재는 크게 4가지로 분류해서 파악을 해두면 좋다.

1. 순차적 프로그래밍 (절차지향)
ㄴ 가장 초기부터 사용된 기법으로 코드의 흐름에 따라 프로그래밍 하는 기술
ㄴ 요약을 하면 프로그램의 실행부터 종료까지의 흐름을 그대로 프로그래밍 한다.
ㄴ 이 방식은 프로그램의 흐름을 따라가기 때문에 구조적이지 못하고 코드가 여기저기 흩어져 있기 때문에
유지보수가 어렵다는 단점이 있다.

2. 구조적 프로그래밍
ㄴ 순차적 프로그맹의 단점을 보완하기 위해 나온 방식으로 코드의 구조를 기능단위로 묶는 방식
ㄴ 함수 지향 프로그래밍이라고 부르며 순차적 프로그래밍보다 유지보수가 용이하다는 장점이 있다.
ㄴ 문제가 생겼을때 해당 문제가 발생한 기능만 중점적으로 살펴보면 되기 때문에

3. 객체지향 프로그래밍
ㄴ 위의 두 방식과는 전혀 다른 방식으로 코드의 기준을 "객체" 단위로 묶어 프로그래맹 하는 방식을 의미한다.
ㄴ 모든 대상에는 속성과 메서드가 있고 이를 하나로 묶어 객체로 만드는 방식이며
여기서 말하는 대상에는 눈에 보이지 않는것들도 포함이 된다.
ㄴ 객체지향 기법에는 상속이나 다형성등 다양한 개념이 존재하지만 그건 이후에 하자.

4. 컴포넌트 기반 프로그래밍
ㄴ 비교적 최근에 등장한 개념이며 코딩의 기준을 객체가 아닌 컴포넌트 단위로 프로그래밍 하는 방식

ㄴ 객체지향 프로그래밍이 사람이라는 객체를 단위로 프로그래밍 한다면 컴포넌트 방식은 사람이 가지고 있는 컴포넌트, 즉 → 머리, 팔, 다리,
몸 등을 세분화 코딩한다

ㄴ 각각의 컴포넌트는 독립적으로 움직이는 부품과 같으므로 다리를 떼서 동물에게 붙여주면 걷거나 달리는 것이 가능하다.

ㄴ 앞으로 배우게 될 Unity Engine에서 추구하는 프로그래밍 방식

ㄴ 굉장히 많은 컴포넌트(기능)가 있고 이것을 추가하는 것만으로도 원하는 기능을 간단하게 만들어 줄 수 있다.




*/
#pragma endregion

// 매크로 명령어
#define BLACK 0
#define BLUE 1
#define GREEN 2
#define RED 4
#define WHITE 15




// 헤더파일(c++ 프로그래밍에서 가장 기본이자 중요한 헤더파일)
// iostream: 입, 출력을 담당하는 c++ 표준 라이브러리
// #include 키워드는 해당 경로에 있는 파일의 내용을 단순하게 복사하는 역할을 한다
// ㄴ #: 명령 지시자 
// 표준 라이브러리는 보통 <헤더파일> 이렇게 사용이 된다.
// 프로그래밍 언어도 결국 사람이 만들었기 때문에 익숙해 진다면 대략적인 유추가 가능하다.
// stream은 여러 장치에 입력과 출력 작업이 실행되는것을 "추상화"하여 나타낸것
// iostream에 있는 cout, cin, 그리고 end1
#include <iostream>
// 구버전 헤더 파일
// ㄴ C 언어
#include <Windows.h>

// 헤더파일을 포함할때는 <>(표준 헤더 파일), ""(사용자 정의 헤더파일) 두종류가 있다.

void TextColor(int font, int background);


// 메인 함수(앤트리 포인트 진입점(컴파일러))
/*
메인 함수는 하나만 존재한다.
ㄴ c/c++ 언어로 작성 되어 있는 프로그램이 처음 실행되는 부분

- c/c++ 언어는 프로그램이 처음 실행되기 위해서 반드시 main 함수를 포함하고 있어야 한다
main 함수는 프로그램이 가장 먼저 시작되는 부분이기 때문에 해당 함수가 존재하지 않을 경우 프로그램 자체가 실행되지 않는다.



▶ c/c++ 언어가 프로그램으로 변환되기 위해서 거치는 큰 단계

1. 전처리기
2. 컴파일
3. 링크
*/
// std(표준)라는 이름안에 정의되어 있는 것을 그냥 사용하겠다
// ㄴ 이름 공간 std에 선언된것은 std라는 이름 공간의 선언 없이 접근하겠다는 선언 지시문

// namespace (이름 공간): 이름 충돌을 방지하기 위해 사용된다.
// ㄴ 프로그래밍에서는 이름 충돌이라는 것이 생길 수가 있는데 같은 이름일 경우 컴파일 에러가 발생한다.
// ㄴ 이름공간 std에 선언된 모든 것에 접근할때에는 이름 공간 지정을 생략하겠다는 선언
using namespace std;
	// () {} [] 

	void main()
{
	/*
 ▶ 코드 작성의 기본
 ㄴ 빨간색 밑줄이 있으면 안된다.
 ㄴ 빨간색 밑줄을 보게 된다면

 1. 오타 체크
 2. 앞, 뒤를 체크할것
 3.;이 빠졌는지 확인
 참고:
 ㄴ ;은 코딩의 마침표와 같다.
  ㄴ 반드시 사용을 해야한다
  */

  // std: 표준
  // cout: console output(출력해라)
  // endl: end line (줄을 바꾼다, → 개행)
  // <<: 출력 연산자 : cout (c언어는 printf())
  // >>: 입력 연산자: cin (c 언어는 scanf())
  // :: → 접근 연산자
// std: 장점 메모리 효율이 높음, 단점 작업효율 저하, using namespace std 장점: 작업효율좋음, 단점: 메모리효율이 높음

	cout << "지옥에 온걸 환영해" << endl;
	cout << "지옥에 온걸 환영해" << endl;
	cout << "지옥에 온걸 환영해" << endl;
	cout << "지옥에 온걸 환영해" << endl;
	cout << "지옥에 온걸 환영해" << endl;

	cout << "문자 출력:" << "쌍따옴표 안에 작성하면 된다." << endl;
	cout << "숫자 출력:" << 12345 << "그냥 숫자 적으면 된다." << endl;
	cout << "★" << endl;
	cout << "◈" << endl;
	// 자기 소개 출력
	// ㄴ 이름, 나이, 연락처, 주소, 이메일, 각오, 가고 싶은 회사, 만들고 싶은 게임. 취미 

	cout << "이금범, 30. 010-7523-7779, 서울 금천구 독산로58가길 27 칠성아트빌 501호, lawleegn@naver.com, 펄어비스, 디펜스, 게임" << endl;
	cout << "이금범" << endl;
	cout << 30 << endl;
	cout << "010-7523-7779" << endl;
	cout << "서울 금천구 독산로 58가길 27 칠성아트빌 501호"  << endl;
	cout << "lawleegb@naver.com" << endl;
	cout << "열심히 하겠습니다" << endl;
	cout << "펄어비스" << endl;
	cout << "디펜스" << endl;
	cout << "게임" << endl;

	printf("지옥에 온걸 환영한다! \n");
/*
※ c언어는 (stdio.h) 헤더 필요
▶ printf / scanf 함수에서 이용되는 서식 문자란?
- 서식 문자는 문자열을 출력 또는 입력을 받을때 해당 서식 문자의 자리를 다른 수로 대체하기 위한 자리매김 역할을 하는 문자를 의미한다.
- 서식 문자를 이용하면 고정되어 있지 않는 문자열을 출력 또는 입력 받는것이 가능하다

▷ 서식 문자의 종류
-%d (int형 정수를 대체하는 용도)
-%ld (long 형 정수를 대체하는 용도)
%lld (ong long형 정수를 대체하는 용도)
%c (char형 문자를 대체하는 용도)
%s (문자열 입력)
%f (float형 실수를 대체하는 용도)
%1f (double형 실수를 대체하는 용도)

▷ printf 특수 문자
-\n: 개행
-\t: 수형탭
-\v: 수직탭
-\\:＼
-\?: ?
-\': '
-\": "
*/

	//cout << "나는 오늘 기분이 "매우" 좋다<< end1;
	//

	cout << "나는 오늘 기분이 \"매우\" 좋다" << endl;

	TextColor(RED, WHITE);
	cout << "=========================" << endl;

	TextColor(3, 12);
	cout << "=========================" << endl;

}

	void TextColor(int font, int background)
	{
		int Color = font + background * 16;
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), Color); }




		/*
		※오늘 배운 내용은 반드시 복습을 진행한다.
		과제1. 좋아하는 캐릭터 출력 
		- 캐릭터 양식은 자유
		- 최소 사이즈: 30 X 30
	
	※ 아스키 코드 X


		과제2. 좋아하는 캐릭터 출력 II
		-과제 1번과 동일하지만 컬러풀하게 만든다.
		-최소사이즈 50 X 50
		
		※1번과 2번 과제 모두 최소 사이즈를 신경 쓴다

		과제3. 한컴타자연습 긴글(영문) 150타 이상 인증샷
		
		한줄조사. C++ 변수 +연산자의 종류 조사
		
		- 노트에 적어온다.

		*/